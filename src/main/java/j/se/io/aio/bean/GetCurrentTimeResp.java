// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from time.proto

package j.se.io.aio.bean;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class GetCurrentTimeResp implements Externalizable, Message<GetCurrentTimeResp>
{

    public static Schema<GetCurrentTimeResp> getSchema()
    {
        return SCHEMA;
    }

    public static GetCurrentTimeResp getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final GetCurrentTimeResp DEFAULT_INSTANCE = new GetCurrentTimeResp();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Long time;

    public GetCurrentTimeResp()
    {
        
    }

    public GetCurrentTimeResp(
        Long time
    )
    {
        this.time = time;
    }

    // getters and setters

    // time

    public Long getTime()
    {
        return time;
    }

    public void setTime(Long time)
    {
        this.time = time;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<GetCurrentTimeResp> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<GetCurrentTimeResp> SCHEMA = new Schema<GetCurrentTimeResp>()
    {
        // schema methods

        public GetCurrentTimeResp newMessage()
        {
            return new GetCurrentTimeResp();
        }

        public Class<GetCurrentTimeResp> typeClass()
        {
            return GetCurrentTimeResp.class;
        }

        public String messageName()
        {
            return GetCurrentTimeResp.class.getSimpleName();
        }

        public String messageFullName()
        {
            return GetCurrentTimeResp.class.getName();
        }

        public boolean isInitialized(GetCurrentTimeResp message)
        {
            return 
                message.time != null;
        }

        public void mergeFrom(Input input, GetCurrentTimeResp message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.time = input.readInt64();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, GetCurrentTimeResp message) throws IOException
        {
            if(message.time == null)
                throw new UninitializedMessageException(message);
            output.writeInt64(1, message.time, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "time";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("time", 1);
        }
    };
    
}
